{{- range $key, $value := .Values.global.amdllm.deployments }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker_compose.yaml
    kompose.version: 1.33.0 (3ce457399)
  labels:
    io.kompose.service: {{ $value.name }}
  name: {{ $value.name }}
  namespace: {{ $.Values.global.amdllm.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: {{ $value.name }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker_compose.yaml
        kompose.version: 1.33.0 (3ce457399)
      labels:
        io.kompose.network/chatqna-default: "true"
        io.kompose.service: {{ $value.name }}
    spec:
      containers:
        - args:
            - --model-id
            - {{ $value.model }}
            - --port
            - "{{ $value.container_port }}"
            {{- if $value.truncate }}
            - --auto-truncate
            {{- end}}
          env:
            - name: {{ $.Values.global.amdllm.secret.env_name }}
              valueFrom:
                secretKeyRef:
                  key: {{ $.Values.global.amdllm.secret.key }}
                  name: {{ $.Values.global.amdllm.secret.name }}
            - name: HOME
              value: /data
            {{- if $.Values.global.amdllm.runtime_envs }}
            {{- range $.Values.global.amdllm.runtime_envs }}
            - name: {{ .name }}
              value: {{ .value }}
            {{- end }}
            {{- end }}
          image: {{ $.Values.global.amdllm.image }}
          name: {{ $value.name }}-server
          ports:
            - containerPort: 80
              protocol: TCP
          volumeMounts:
            - mountPath: /data
              name: {{ $value.name }}-claim0
      restartPolicy: Always
      volumes:
        - name: {{ $value.name }}-claim0
          persistentVolumeClaim:
            claimName: {{ $value.name }}-claim0
{{- end}}

